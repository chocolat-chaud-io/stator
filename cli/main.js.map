{"version":3,"file":"main.js","mappings":"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","sources":["webpack://stator/./apps/cli/src/commands/enforce-file-folder-naming-convention.ts","webpack://stator/./apps/cli/src/commands/enforce-valid-imports-api.ts","webpack://stator/./apps/cli/src/commands/generate-cache-key-file.ts","webpack://stator/./apps/cli/src/commands/generate-entity-index-file.ts","webpack://stator/./apps/cli/src/commands/rename-project.ts","webpack://stator/./apps/cli/src/utils.ts","webpack://stator/external commonjs \"clipanion\"","webpack://stator/external commonjs \"lodash\"","webpack://stator/external commonjs \"lodash/camelCase\"","webpack://stator/external commonjs \"lodash/capitalize\"","webpack://stator/external commonjs \"lodash/kebabCase\"","webpack://stator/external commonjs \"tslib\"","webpack://stator/external node-commonjs \"fs\"","webpack://stator/external node-commonjs \"path\"","webpack://stator/webpack/bootstrap","webpack://stator/./apps/cli/src/main.ts"],"sourcesContent":["import path from \"path\"\n\nimport { Command } from \"clipanion\"\n\nimport { walk } from \"../utils\"\n\nexport class EnforceFileFolderNamingConvention extends Command {\n  static paths = [[\"enforce-file-folder-naming-convention\"]]\n\n  static usage = Command.Usage({\n    category: \"enforcers\",\n    description: \"This script will make sure that your folders and file use kebab-case.\",\n    examples: [[\"A basic example\", \"npm run stator-cli generate-cache-key-file\"]],\n  })\n\n  async execute(): Promise<number | void> {\n    const ignoredPaths = [\n      \"node_modules\",\n      \"dist\",\n      \".git\",\n      \".idea\",\n      \".gitkeep\",\n      \".eslintrc\",\n      \".cache\",\n      \"README\",\n      \"LICENSE\",\n      \"CONTRIBUTING\",\n      \"dockerfiles\",\n      \"Dockerfile\",\n    ]\n    const capitalLetterRegex = /[A-Z]/gm\n    const errorPathPaths = []\n\n    function validateEntryName(entry) {\n      const entryName = path.basename(entry).replace(/\\.[^/.]+$/, \"\")\n      if (entryName.length > 0 && !ignoredPaths.includes(entryName) && entryName.match(capitalLetterRegex)) {\n        errorPathPaths.push(entry)\n      }\n    }\n\n    const folderNames = []\n    for await (const entry of walk(path.join(__dirname, \"..\"), ignoredPaths, folderNames)) {\n      validateEntryName(entry)\n    }\n\n    for (const folderName of folderNames) {\n      validateEntryName(folderName)\n    }\n\n    if (errorPathPaths.length > 0) {\n      const errorMessage = `${errorPathPaths.length} files/directories do not respect the kebab-case convention enforced.`\n\n      console.error(errorMessage)\n      console.error(errorPathPaths)\n\n      process.exit(1)\n    }\n\n    console.info(\"Congratulations, all your files and directories are properly named!\")\n  }\n}\n","import fs from \"fs\"\nimport path from \"path\"\n\nimport { Command } from \"clipanion\"\n\nimport { walk } from \"../utils\"\n\nexport class EnforceValidImportsApi extends Command {\n  static paths = [[\"enforce-valid-imports-api\"]]\n\n  static usage = Command.Usage({\n    category: \"enforcers\",\n    description:\n      \"This script will make sure that your imports are valid in the API. This is used to avoid import errors than can be hard to spot.\",\n    examples: [[\"A basic example\", \"npm run stator-cli enforce-valid-imports-api\"]],\n  })\n\n  async execute(): Promise<number | void> {\n    const invalidImportRegex = /import .*stator\\/[a-zA-Z]+\\//gm\n    const fileContainingInvalidImports = []\n\n    async function validateEntryName(entry) {\n      const fileContent = await fs.promises.readFile(entry, { encoding: \"utf-8\" })\n      const match = fileContent.match(invalidImportRegex)\n      if (match) {\n        fileContainingInvalidImports.push(entry)\n      }\n    }\n\n    for await (const entry of walk(path.join(__dirname, \"../apps/api/src\"), [])) {\n      await validateEntryName(entry)\n    }\n\n    if (fileContainingInvalidImports.length > 0) {\n      const errorMessage = `${fileContainingInvalidImports.length} file(s) have invalid imports. They should NOT look like this: \"@stator/models/something/entity\"`\n\n      console.error(errorMessage)\n      console.error(fileContainingInvalidImports)\n\n      process.exit(1)\n    }\n\n    console.info(\"Congratulations, all your imports in api are valid!\")\n  }\n}\n","import fs from \"fs\"\nimport path from \"path\"\n\nimport { Command } from \"clipanion\"\nimport camelCase from \"lodash/camelCase\"\nimport capitalize from \"lodash/capitalize\"\nimport kebabCase from \"lodash/kebabCase\"\n\nimport { walk } from \"../utils\"\n\nexport class GenerateCacheKeyFile extends Command {\n  static paths = [[\"generate-cache-key-file\"]]\n\n  static usage = Command.Usage({\n    category: \"generators\",\n    description: \"This script will generate the required cache key files for your redux webapp.\",\n    examples: [[\"A basic example\", \"npm run stator-cli generate-cache-key-file\"]],\n  })\n\n  async execute(): Promise<number | void> {\n    const endpointsPath = path.join(__dirname, \"../apps/webapp/src/redux/endpoints\")\n    const importStatements = []\n    const cacheKeys = []\n    let cacheFileContent = `/**\n * This file was automatically generated by tools/generators/generate-cache-file.js file\n */\n\nIMPORT_STATEMENTS\n\n`\n\n    for await (const pathName of walk(endpointsPath, [])) {\n      const isEndpointsFile = fs.lstatSync(pathName).isFile() && pathName.includes(\"-endpoints\")\n      if (isEndpointsFile) {\n        const cacheKey = camelCase(path.basename(pathName, \".ts\").replace(\"-endpoints\", \"\"))\n        cacheKeys.push(cacheKey)\n        const endpointsSelectorRegex = /build => \\(({[\\s\\S]+overrideExisting: false,\\s+})/m\n        const endpointsObjectString = fs.readFileSync(pathName, { encoding: \"utf8\" }).match(endpointsSelectorRegex)[1]\n        const endpointSelectorRegex = /([a-z-A-Z]+): build.[qm]/gm\n        const endpointNames = [...endpointsObjectString.matchAll(endpointSelectorRegex)].map(entries => [entries[1]]).flat()\n\n        if (endpointNames.length > 0) {\n          importStatements.push(`import { ${cacheKey}Api } from \"./${kebabCase(cacheKey)}-endpoints\"`)\n          cacheFileContent += `export const add${capitalize(cacheKey)}CacheKeys = () =>\n  ${cacheKey}Api.enhanceEndpoints({\n    endpoints: {\n${endpointNames\n  .map(endpointName => {\n    const tagPropertyKey = endpointName.includes(\"get\") ? \"providesTags\" : \"invalidatesTags\"\n    return `      ${endpointName}: { ${tagPropertyKey}: [\"${cacheKey}\"] },`\n  })\n  .join(\"\\n\")}\n    },\n  })\\n`\n        }\n      }\n    }\n\n    cacheFileContent = cacheFileContent.replace(\"IMPORT_STATEMENTS\", importStatements.map(importStatement => importStatement).join(\"\\n\"))\n    cacheFileContent += `export const addGeneratedCacheKeys = () => {\n  ${cacheKeys.map(cacheKey => `add${capitalize(cacheKey)}CacheKeys()`).join(\"\\n\")}\n}\\n`\n\n    fs.writeFileSync(`${endpointsPath}/generated-cache-keys.ts`, cacheFileContent, { encoding: \"utf8\" })\n    console.info(`Generated ${endpointsPath}/generated-cache-keys.ts`)\n  }\n}\n","import fs from \"fs\";\nimport path from \"path\";\nimport { walk } from \"../utils\";\nimport { Command } from \"clipanion\";\n\nexport class GenerateEntityIndexFile extends Command {\n  static paths = [[\"generate-entity-index-file\"]]\n\n  static usage = Command.Usage({\n    category: \"generators\",\n    description: \"This script will generate index file for the model library.\",\n    examples: [[\"A basic example\", \"npm run stator-cli generate-entity-index-file\"]],\n  })\n\n  async execute(): Promise<number | void> {\n    const entityIndexLockFilePath = path.join(__dirname, \"entity-index-hash.txt\")\n    const indexFilePath = path.join(__dirname, \"../libs/models/src/index.ts\")\n    const filePathsByFolder = {}\n\n    for await (const entry of walk(path.join(__dirname, \"../libs/models/src/lib\"), [])) {\n      const folder = entry.split(\"lib/\")[1].split(\"/\")[0]\n\n      if (!filePathsByFolder[folder]) {\n        filePathsByFolder[folder] = []\n      }\n      filePathsByFolder[folder].push(entry)\n    }\n\n    let indexFileContent = `/**\n * This file was automatically generated by generate-entity-index.js file\n * You can disable the automatic generation by removing the prepare section of the workspace.json file under api section\n */\\n\\n`\n\n    const sortedFolders = Object.entries(filePathsByFolder)\n      .sort()\n      .reduce((container, [key, value]) => ({ ...container, [key]: value }), {})\n    for (const [folder, filePaths] of Object.entries(sortedFolders)) {\n      indexFileContent += `// ${folder}\\n`\n      indexFileContent += getExportLinesFromFilePaths(filePaths)\n      indexFileContent += \"\\n\"\n    }\n\n    const entityIndexLockFileExists = fs.existsSync(entityIndexLockFilePath)\n    const existingEntityHash = parseInt(\n      entityIndexLockFileExists ? await fs.promises.readFile(entityIndexLockFilePath, { encoding: \"utf8\" }) : \"\"\n    )\n    const currentHash = hashCode(indexFileContent)\n    if (existingEntityHash !== currentHash) {\n      await fs.promises.writeFile(entityIndexLockFilePath, currentHash.toString(), { encoding: \"utf8\" })\n      await fs.promises.writeFile(indexFilePath, indexFileContent, { encoding: \"utf8\" })\n\n      console.info(\"Generated index file for shared entity library\")\n    }\n  }\n}\n\nfunction hashCode(str) {\n  let hash = 0\n  let i\n  let chr\n\n  for (i = 0; i < str.length; i++) {\n    chr = str.charCodeAt(i)\n    hash = (hash << 5) - hash + chr\n    hash |= 0 // Convert to 32bit integer\n  }\n  return hash\n}\n\nfunction getExportLinesFromFilePaths(filePaths) {\n  return filePaths\n    .sort()\n    .map(filePath => {\n      const relevantFilePath = filePath.split(\"src/\")[1].replace(\".ts\", \"\")\n\n      return `export * from \"./${relevantFilePath}\"\\n`\n    })\n    .join(\"\")\n}\n","import fs from \"fs\"\nimport path from \"path\"\n\nimport { Command, Option } from \"clipanion\"\nimport { camelCase, kebabCase } from \"lodash\"\n\nimport { walk } from \"../utils\"\n\nexport class RenameProject extends Command {\n  static paths = [[\"rename-project\"]]\n  organization = Option.String(\"--organization\", { required: true })\n  project = Option.String(\"--project\", { required: true })\n\n  static usage = Command.Usage({\n    category: \"getting-started\",\n    description: \"This script will rename all occurrences of stator and chocolat-chaud with your own names.\",\n    examples: [[\"A basic example\", \"npm run stator-cli rename-project --organization chocolat-chaud-io --project stator\"]],\n  })\n\n  async execute(): Promise<number | void> {\n    await this.renameProject()\n  }\n\n  async renameProject() {\n    try {\n      const organizationRegex = /^[a-zA-Z-\\d_]+$/gim\n      if (!organizationRegex.test(this.organization)) {\n        console.error(\"The organization name must respect this regex /^[a-zA-Z-\\\\d_]+$/gmi\")\n        process.exit(1)\n      }\n\n      const projectRegex = /^[a-zA-Z-\\d_]+$/gim\n      if (!projectRegex.test(this.project)) {\n        console.error(\"The project name must respect this regex /^[a-zA-Z-\\\\d_]+$/gmi\")\n        process.exit(1)\n      }\n      const databaseName = this.project.replace(/-/g, \"_\")\n      const databaseFiles = [\"docker-compose.yml\", \"seed-data.js\", \"init.sql\", \"test.ts\", \"orm-config.ts\"]\n\n      const camelCaseProjectName = camelCase(this.project)\n\n      const ignoredFolders = [\"node_modules\", \"dist\", \".git\", \".idea\", \".cache\"]\n      for await (const entry of walk(path.join(__dirname, \"../\"), ignoredFolders)) {\n        const entryStat = await fs.promises.lstat(entry)\n        if (entryStat.isFile()) {\n          const fileContent = await fs.promises.readFile(entry, \"utf-8\")\n          if (fileContent) {\n            const isDatabaseFile = databaseFiles.some(databaseFile => entry.includes(databaseFile))\n            const replacedFileContent = fileContent\n              .replace(/chocolat-chaud-io/gim, this.organization)\n              .replace(/stator/gim, isDatabaseFile ? databaseName : camelCaseProjectName)\n            await fs.promises.writeFile(entry, replacedFileContent, \"utf-8\")\n          }\n        }\n      }\n\n      console.info(`This is now YOUR project provided generously by:\n\n███████ ████████  █████  ████████  ██████  ██████ \n██         ██    ██   ██    ██    ██    ██ ██   ██ \n███████    ██    ███████    ██    ██    ██ ██████  \n     ██    ██    ██   ██    ██    ██    ██ ██   ██ \n███████    ██    ██   ██    ██     ██████  ██   ██ \n                                                   \n    `)\n    } catch (error) {\n      console.error(error as Error)\n    }\n  }\n}\n","import fs from \"fs\"\nimport path from \"path\"\n\nexport const walk = async function* (dir: string, ignoredPaths: Array<string>, walkedFolderNames: string[] = []) {\n  for await (const directoryEntry of await fs.promises.opendir(dir)) {\n    const entryPath = path.join(dir, directoryEntry.name)\n    if (directoryEntry.isDirectory() && !ignoredPaths.includes(directoryEntry.name)) {\n      walkedFolderNames.push(entryPath)\n      yield* walk(entryPath, ignoredPaths, walkedFolderNames)\n    } else if (directoryEntry.isFile()) {\n      yield entryPath\n    }\n  }\n}\n","module.exports = require(\"clipanion\");","module.exports = require(\"lodash\");","module.exports = require(\"lodash/camelCase\");","module.exports = require(\"lodash/capitalize\");","module.exports = require(\"lodash/kebabCase\");","module.exports = require(\"tslib\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Builtins, Cli } from \"clipanion\"\n\nimport { EnforceFileFolderNamingConvention } from \"./commands/enforce-file-folder-naming-convention\"\nimport { EnforceValidImportsApi } from \"./commands/enforce-valid-imports-api\"\nimport { GenerateCacheKeyFile } from \"./commands/generate-cache-key-file\"\nimport { GenerateEntityIndexFile } from \"./commands/generate-entity-index-file\"\nimport { RenameProject } from \"./commands/rename-project\"\n\nconst [, , ...args] = process.argv\n\nconst cli = new Cli({\n  binaryLabel: `stator-cli`,\n  binaryName: `npm run stator-cli`,\n  binaryVersion: `1.0.0`,\n})\n\ncli.register(RenameProject)\ncli.register(GenerateCacheKeyFile)\ncli.register(GenerateEntityIndexFile)\ncli.register(EnforceValidImportsApi)\ncli.register(EnforceFileFolderNamingConvention)\ncli.register(Builtins.HelpCommand)\ncli.runExit(args).catch(console.error)\n"],"names":["EnforceFileFolderNamingConvention","Command","async","ignoredPaths","capitalLetterRegex","errorPathPaths","validateEntryName","entry","entryName","basename","replace","length","includes","match","push","folderNames","walk","join","__dirname","folderName","errorMessage","console","error","process","exit","info","paths","usage","Usage","category","description","examples","EnforceValidImportsApi","invalidImportRegex","fileContainingInvalidImports","promises","readFile","encoding","GenerateCacheKeyFile","endpointsPath","importStatements","cacheKeys","cacheFileContent","pathName","lstatSync","isFile","cacheKey","endpointsSelectorRegex","endpointSelectorRegex","endpointNames","readFileSync","matchAll","map","entries","flat","endpointName","tagPropertyKey","importStatement","writeFileSync","GenerateEntityIndexFile","entityIndexLockFilePath","indexFilePath","filePathsByFolder","folder","split","indexFileContent","sortedFolders","Object","sort","reduce","container","key","value","filePaths","getExportLinesFromFilePaths","entityIndexLockFileExists","existsSync","existingEntityHash","parseInt","currentHash","str","i","chr","hash","charCodeAt","hashCode","writeFile","toString","filePath","RenameProject","organization","Option","String","required","project","this","renameProject","test","databaseName","databaseFiles","camelCaseProjectName","camelCase","ignoredFolders","lstat","fileContent","isDatabaseFile","some","databaseFile","replacedFileContent","dir","walkedFolderNames","directoryEntry","opendir","entryPath","name","isDirectory","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","args","argv","cli","Cli","binaryLabel","binaryName","binaryVersion","register","Builtins","HelpCommand","runExit","catch"],"sourceRoot":""}