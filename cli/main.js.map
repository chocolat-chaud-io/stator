{"version":3,"file":"main.js","mappings":";;;;;;;;;AAAA,yEAAuB;AAEvB,qDAAmC;AAEnC,+DAA+B;AAE/B,MAAa,iCAAkC,SAAQ,mBAAO;IAS5D,KAAK,CAAC,OAAO;QACX,MAAM,YAAY,GAAG;YACnB,cAAc;YACd,MAAM;YACN,MAAM;YACN,OAAO;YACP,UAAU;YACV,WAAW;YACX,QAAQ;YACR,QAAQ;YACR,SAAS;YACT,cAAc;YACd,aAAa;YACb,YAAY;SACb;QACD,MAAM,kBAAkB,GAAG,SAAS;QACpC,MAAM,cAAc,GAAG,EAAE;QAEzB,SAAS,iBAAiB,CAAC,KAAK;YAC9B,MAAM,SAAS,GAAG,cAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;YAC/D,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAAE;gBACpG,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;aAC3B;QACH,CAAC;QAED,MAAM,WAAW,GAAG,EAAE;QACtB,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,gBAAI,EAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,EAAE;YACrF,iBAAiB,CAAC,KAAK,CAAC;SACzB;QAED,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;YACpC,iBAAiB,CAAC,UAAU,CAAC;SAC9B;QAED,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,MAAM,YAAY,GAAG,GAAG,cAAc,CAAC,MAAM,uEAAuE;YAEpH,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC;YAC3B,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC;YAE7B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;SAChB;QAED,OAAO,CAAC,IAAI,CAAC,qEAAqE,CAAC;IACrF,CAAC;;AArDH,8EAsDC;AArDQ,uCAAK,GAAG,CAAC,CAAC,uCAAuC,CAAC,CAAC;AAEnD,uCAAK,GAAG,mBAAO,CAAC,KAAK,CAAC;IAC3B,QAAQ,EAAE,WAAW;IACrB,WAAW,EAAE,uEAAuE;IACpF,QAAQ,EAAE,CAAC,CAAC,iBAAiB,EAAE,4CAA4C,CAAC,CAAC;CAC9E,CAAC;;;;;;;;;;;ACbJ,qEAAmB;AACnB,yEAAuB;AAEvB,qDAAmC;AAEnC,+DAA+B;AAE/B,MAAa,sBAAuB,SAAQ,mBAAO;IAUjD,KAAK,CAAC,OAAO;QACX,MAAM,kBAAkB,GAAG,gCAAgC;QAC3D,MAAM,4BAA4B,GAAG,EAAE;QAEvC,KAAK,UAAU,iBAAiB,CAAC,KAAK;YACpC,MAAM,WAAW,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC;YAC5E,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,kBAAkB,CAAC;YACnD,IAAI,KAAK,EAAE;gBACT,4BAA4B,CAAC,IAAI,CAAC,KAAK,CAAC;aACzC;QACH,CAAC;QAED,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,gBAAI,EAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,EAAE,EAAE,CAAC,EAAE;YAC3E,MAAM,iBAAiB,CAAC,KAAK,CAAC;SAC/B;QAED,IAAI,4BAA4B,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3C,MAAM,YAAY,GAAG,GAAG,4BAA4B,CAAC,MAAM,kGAAkG;YAE7J,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC;YAC3B,OAAO,CAAC,KAAK,CAAC,4BAA4B,CAAC;YAE3C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;SAChB;QAED,OAAO,CAAC,IAAI,CAAC,qDAAqD,CAAC;IACrE,CAAC;;AApCH,wDAqCC;AApCQ,4BAAK,GAAG,CAAC,CAAC,2BAA2B,CAAC,CAAC;AAEvC,4BAAK,GAAG,mBAAO,CAAC,KAAK,CAAC;IAC3B,QAAQ,EAAE,WAAW;IACrB,WAAW,EACT,kIAAkI;IACpI,QAAQ,EAAE,CAAC,CAAC,iBAAiB,EAAE,8CAA8C,CAAC,CAAC;CAChF,CAAC;;;;;;;;;;;ACfJ,qEAAmB;AACnB,yEAAuB;AAEvB,qDAAmC;AACnC,0FAAwC;AACxC,4FAA0C;AAC1C,0FAAwC;AAExC,+DAA+B;AAE/B,MAAa,oBAAqB,SAAQ,mBAAO;IAS/C,KAAK,CAAC,OAAO;QACX,MAAM,aAAa,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,oCAAoC,CAAC;QAChF,MAAM,gBAAgB,GAAG,EAAE;QAC3B,MAAM,SAAS,GAAG,EAAE;QACpB,IAAI,gBAAgB,GAAG;;;;;;CAM1B;QAEG,IAAI,KAAK,EAAE,MAAM,QAAQ,IAAI,gBAAI,EAAC,aAAa,EAAE,EAAE,CAAC,EAAE;YACpD,MAAM,eAAe,GAAG,YAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,IAAI,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC;YAC1F,IAAI,eAAe,EAAE;gBACnB,MAAM,QAAQ,GAAG,uBAAS,EAAC,cAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;gBACpF,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC;gBACxB,MAAM,sBAAsB,GAAG,oDAAoD;gBACnF,MAAM,qBAAqB,GAAG,YAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;gBAC9G,MAAM,qBAAqB,GAAG,4BAA4B;gBAC1D,MAAM,aAAa,GAAG,CAAC,GAAG,qBAAqB,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;gBAEpH,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC5B,gBAAgB,CAAC,IAAI,CAAC,YAAY,QAAQ,iBAAiB,uBAAS,EAAC,QAAQ,CAAC,aAAa,CAAC;oBAC5F,gBAAgB,IAAI,mBAAmB,wBAAU,EAAC,QAAQ,CAAC;IACjE,QAAQ;;EAEV,aAAa;yBACZ,GAAG,CAAC,YAAY,CAAC,EAAE;wBAClB,MAAM,cAAc,GAAG,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,iBAAiB;wBACxF,OAAO,SAAS,YAAY,OAAO,cAAc,OAAO,QAAQ,OAAO;oBACzE,CAAC,CAAC;yBACD,IAAI,CAAC,IAAI,CAAC;;OAEN;iBACE;aACF;SACF;QAED,gBAAgB,GAAG,gBAAgB,CAAC,OAAO,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrI,gBAAgB,IAAI;IACpB,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,wBAAU,EAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IAC7E;QAEA,YAAE,CAAC,aAAa,CAAC,GAAG,aAAa,0BAA0B,EAAE,gBAAgB,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;QACpG,OAAO,CAAC,IAAI,CAAC,aAAa,aAAa,0BAA0B,CAAC;IACpE,CAAC;;AAvDH,oDAwDC;AAvDQ,0BAAK,GAAG,CAAC,CAAC,yBAAyB,CAAC,CAAC;AAErC,0BAAK,GAAG,mBAAO,CAAC,KAAK,CAAC;IAC3B,QAAQ,EAAE,YAAY;IACtB,WAAW,EAAE,+EAA+E;IAC5F,QAAQ,EAAE,CAAC,CAAC,iBAAiB,EAAE,4CAA4C,CAAC,CAAC;CAC9E,CAAC;;;;;;;;;;;ACjBJ,qEAAoB;AACpB,yEAAwB;AACxB,+DAAgC;AAChC,qDAAoC;AAEpC,MAAa,uBAAwB,SAAQ,mBAAO;IASlD,KAAK,CAAC,OAAO;QACX,MAAM,uBAAuB,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,uBAAuB,CAAC;QAC7E,MAAM,aAAa,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,6BAA6B,CAAC;QACzE,MAAM,iBAAiB,GAAG,EAAE;QAE5B,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,gBAAI,EAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,wBAAwB,CAAC,EAAE,EAAE,CAAC,EAAE;YAClF,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAEnD,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE;gBAC9B,iBAAiB,CAAC,MAAM,CAAC,GAAG,EAAE;aAC/B;YACD,iBAAiB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;SACtC;QAED,IAAI,gBAAgB,GAAG;;;QAGnB;QAEJ,MAAM,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC;aACpD,IAAI,EAAE;aACN,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,SAAS,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;QAC5E,KAAK,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;YAC/D,gBAAgB,IAAI,MAAM,MAAM,IAAI;YACpC,gBAAgB,IAAI,2BAA2B,CAAC,SAAS,CAAC;YAC1D,gBAAgB,IAAI,IAAI;SACzB;QAED,MAAM,yBAAyB,GAAG,YAAE,CAAC,UAAU,CAAC,uBAAuB,CAAC;QACxE,MAAM,kBAAkB,GAAG,QAAQ,CACjC,yBAAyB,CAAC,CAAC,CAAC,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,uBAAuB,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAC3G;QACD,MAAM,WAAW,GAAG,QAAQ,CAAC,gBAAgB,CAAC;QAC9C,IAAI,kBAAkB,KAAK,WAAW,EAAE;YACtC,MAAM,YAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,uBAAuB,EAAE,WAAW,CAAC,QAAQ,EAAE,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;YAClG,MAAM,YAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,EAAE,gBAAgB,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;YAElF,OAAO,CAAC,IAAI,CAAC,gDAAgD,CAAC;SAC/D;IACH,CAAC;;AAhDH,0DAiDC;AAhDQ,6BAAK,GAAG,CAAC,CAAC,4BAA4B,CAAC,CAAC;AAExC,6BAAK,GAAG,mBAAO,CAAC,KAAK,CAAC;IAC3B,QAAQ,EAAE,YAAY;IACtB,WAAW,EAAE,6DAA6D;IAC1E,QAAQ,EAAE,CAAC,CAAC,iBAAiB,EAAE,+CAA+C,CAAC,CAAC;CACjF,CAAC;AA4CJ,SAAS,QAAQ,CAAC,GAAG;IACnB,IAAI,IAAI,GAAG,CAAC;IACZ,IAAI,CAAC;IACL,IAAI,GAAG;IAEP,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/B,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;QACvB,IAAI,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG;QAC/B,IAAI,IAAI,CAAC,EAAC,2BAA2B;KACtC;IACD,OAAO,IAAI;AACb,CAAC;AAED,SAAS,2BAA2B,CAAC,SAAS;IAC5C,OAAO,SAAS;SACb,IAAI,EAAE;SACN,GAAG,CAAC,QAAQ,CAAC,EAAE;QACd,MAAM,gBAAgB,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;QAErE,OAAO,oBAAoB,gBAAgB,KAAK;IAClD,CAAC,CAAC;SACD,IAAI,CAAC,EAAE,CAAC;AACb,CAAC;;;;;;;;;;;AC9ED,qEAAmB;AACnB,yEAAuB;AAEvB,qDAA2C;AAE3C,+DAA+B;AAE/B,MAAa,aAAc,SAAQ,mBAAO;IAA1C;;QAEE,iBAAY,GAAG,kBAAM,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAChD,YAAO,GAAG,kBAAM,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAyD7C,CAAC;IAjDC,KAAK,CAAC,OAAO;QACX,MAAM,IAAI,CAAC,aAAa,EAAE;IAC5B,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,IAAI;YACF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC;YACvD,MAAM,iBAAiB,GAAG,oBAAoB;YAC9C,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;gBAC9C,OAAO,CAAC,KAAK,CAAC,qEAAqE,CAAC;gBACpF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;aAChB;YAED,MAAM,YAAY,GAAG,oBAAoB;YACzC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;gBACpC,OAAO,CAAC,KAAK,CAAC,gEAAgE,CAAC;gBAC/E,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;aAChB;YACD,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;YACpD,MAAM,aAAa,GAAG,CAAC,oBAAoB,EAAE,cAAc,EAAE,UAAU,EAAE,SAAS,EAAE,eAAe,CAAC;YAEpG,MAAM,cAAc,GAAG,CAAC,cAAc,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC;YAC1E,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,gBAAI,EAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,cAAc,CAAC,EAAE;gBAC3E,MAAM,SAAS,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC;gBAChD,IAAI,SAAS,CAAC,MAAM,EAAE,EAAE;oBACtB,MAAM,WAAW,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC;oBAC9D,IAAI,WAAW,EAAE;wBACf,MAAM,cAAc,GAAG,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;wBACvF,MAAM,mBAAmB,GAAG,WAAW;6BACpC,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAAC,YAAY,CAAC;6BAClD,OAAO,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;wBACrE,MAAM,YAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,EAAE,mBAAmB,EAAE,OAAO,CAAC;qBACjE;iBACF;aACF;YAED,OAAO,CAAC,IAAI,CAAC;;;;;;;;KAQd,CAAC;SACD;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,KAAc,CAAC;SAC9B;IACH,CAAC;;AA3DH,sCA4DC;AA3DQ,mBAAK,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC;AAI5B,mBAAK,GAAG,mBAAO,CAAC,KAAK,CAAC;IAC3B,QAAQ,EAAE,iBAAiB;IAC3B,WAAW,EAAE,2FAA2F;IACxG,QAAQ,EAAE,CAAC,CAAC,iBAAiB,EAAE,qFAAqF,CAAC,CAAC;CACvH,CAAC;;;;;;;;;;;AChBJ,qEAAmB;AACnB,yEAAuB;AAEhB,MAAM,IAAI,GAAG,KAAK,SAAS,CAAC,EAAE,GAAW,EAAE,YAA2B,EAAE,oBAA8B,EAAE;IAC7G,IAAI,KAAK,EAAE,MAAM,cAAc,IAAI,MAAM,YAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACjE,MAAM,SAAS,GAAG,cAAI,CAAC,IAAI,CAAC,GAAG,EAAE,cAAc,CAAC,IAAI,CAAC;QACrD,IAAI,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YAC/E,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC;YACjC,KAAK,CAAC,CAAC,gBAAI,EAAC,SAAS,EAAE,YAAY,EAAE,iBAAiB,CAAC;SACxD;aAAM,IAAI,cAAc,CAAC,MAAM,EAAE,EAAE;YAClC,MAAM,SAAS;SAChB;KACF;AACH,CAAC;AAVY,YAAI,QAUhB;;;;;;;;;ACbD;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;ACtBA,qDAAyC;AAEzC,wIAAoG;AACpG,gHAA6E;AAC7E,4GAAyE;AACzE,kHAA+E;AAC/E,0FAAyD;AAEzD,MAAM,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI;AAElC,MAAM,GAAG,GAAG,IAAI,eAAG,CAAC;IAClB,WAAW,EAAE,YAAY;IACzB,UAAU,EAAE,oBAAoB;IAChC,aAAa,EAAE,OAAO;CACvB,CAAC;AAEF,GAAG,CAAC,QAAQ,CAAC,8BAAa,CAAC;AAC3B,GAAG,CAAC,QAAQ,CAAC,8CAAoB,CAAC;AAClC,GAAG,CAAC,QAAQ,CAAC,oDAAuB,CAAC;AACrC,GAAG,CAAC,QAAQ,CAAC,kDAAsB,CAAC;AACpC,GAAG,CAAC,QAAQ,CAAC,yEAAiC,CAAC;AAC/C,GAAG,CAAC,QAAQ,CAAC,oBAAQ,CAAC,WAAW,CAAC;AAClC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC","sources":["webpack://stator/./apps/cli/src/commands/enforce-file-folder-naming-convention.ts","webpack://stator/./apps/cli/src/commands/enforce-valid-imports-api.ts","webpack://stator/./apps/cli/src/commands/generate-cache-key-file.ts","webpack://stator/./apps/cli/src/commands/generate-entity-index-file.ts","webpack://stator/./apps/cli/src/commands/rename-project.ts","webpack://stator/./apps/cli/src/utils.ts","webpack://stator/external commonjs \"clipanion\"","webpack://stator/external commonjs \"lodash/camelCase\"","webpack://stator/external commonjs \"lodash/capitalize\"","webpack://stator/external commonjs \"lodash/kebabCase\"","webpack://stator/external commonjs \"tslib\"","webpack://stator/external node-commonjs \"fs\"","webpack://stator/external node-commonjs \"path\"","webpack://stator/webpack/bootstrap","webpack://stator/./apps/cli/src/main.ts"],"sourcesContent":["import path from \"path\"\n\nimport { Command } from \"clipanion\"\n\nimport { walk } from \"../utils\"\n\nexport class EnforceFileFolderNamingConvention extends Command {\n  static paths = [[\"enforce-file-folder-naming-convention\"]]\n\n  static usage = Command.Usage({\n    category: \"enforcers\",\n    description: \"This script will make sure that your folders and file use kebab-case.\",\n    examples: [[\"A basic example\", \"npm run stator-cli generate-cache-key-file\"]],\n  })\n\n  async execute(): Promise<number | void> {\n    const ignoredPaths = [\n      \"node_modules\",\n      \"dist\",\n      \".git\",\n      \".idea\",\n      \".gitkeep\",\n      \".eslintrc\",\n      \".cache\",\n      \"README\",\n      \"LICENSE\",\n      \"CONTRIBUTING\",\n      \"dockerfiles\",\n      \"Dockerfile\",\n    ]\n    const capitalLetterRegex = /[A-Z]/gm\n    const errorPathPaths = []\n\n    function validateEntryName(entry) {\n      const entryName = path.basename(entry).replace(/\\.[^/.]+$/, \"\")\n      if (entryName.length > 0 && !ignoredPaths.includes(entryName) && entryName.match(capitalLetterRegex)) {\n        errorPathPaths.push(entry)\n      }\n    }\n\n    const folderNames = []\n    for await (const entry of walk(path.join(__dirname, \"..\"), ignoredPaths, folderNames)) {\n      validateEntryName(entry)\n    }\n\n    for (const folderName of folderNames) {\n      validateEntryName(folderName)\n    }\n\n    if (errorPathPaths.length > 0) {\n      const errorMessage = `${errorPathPaths.length} files/directories do not respect the kebab-case convention enforced.`\n\n      console.error(errorMessage)\n      console.error(errorPathPaths)\n\n      process.exit(1)\n    }\n\n    console.info(\"Congratulations, all your files and directories are properly named!\")\n  }\n}\n","import fs from \"fs\"\nimport path from \"path\"\n\nimport { Command } from \"clipanion\"\n\nimport { walk } from \"../utils\"\n\nexport class EnforceValidImportsApi extends Command {\n  static paths = [[\"enforce-valid-imports-api\"]]\n\n  static usage = Command.Usage({\n    category: \"enforcers\",\n    description:\n      \"This script will make sure that your imports are valid in the API. This is used to avoid import errors than can be hard to spot.\",\n    examples: [[\"A basic example\", \"npm run stator-cli enforce-valid-imports-api\"]],\n  })\n\n  async execute(): Promise<number | void> {\n    const invalidImportRegex = /import .*stator\\/[a-zA-Z]+\\//gm\n    const fileContainingInvalidImports = []\n\n    async function validateEntryName(entry) {\n      const fileContent = await fs.promises.readFile(entry, { encoding: \"utf-8\" })\n      const match = fileContent.match(invalidImportRegex)\n      if (match) {\n        fileContainingInvalidImports.push(entry)\n      }\n    }\n\n    for await (const entry of walk(path.join(__dirname, \"../apps/api/src\"), [])) {\n      await validateEntryName(entry)\n    }\n\n    if (fileContainingInvalidImports.length > 0) {\n      const errorMessage = `${fileContainingInvalidImports.length} file(s) have invalid imports. They should NOT look like this: \"@stator/models/something/entity\"`\n\n      console.error(errorMessage)\n      console.error(fileContainingInvalidImports)\n\n      process.exit(1)\n    }\n\n    console.info(\"Congratulations, all your imports in api are valid!\")\n  }\n}\n","import fs from \"fs\"\nimport path from \"path\"\n\nimport { Command } from \"clipanion\"\nimport camelCase from \"lodash/camelCase\"\nimport capitalize from \"lodash/capitalize\"\nimport kebabCase from \"lodash/kebabCase\"\n\nimport { walk } from \"../utils\"\n\nexport class GenerateCacheKeyFile extends Command {\n  static paths = [[\"generate-cache-key-file\"]]\n\n  static usage = Command.Usage({\n    category: \"generators\",\n    description: \"This script will generate the required cache key files for your redux webapp.\",\n    examples: [[\"A basic example\", \"npm run stator-cli generate-cache-key-file\"]],\n  })\n\n  async execute(): Promise<number | void> {\n    const endpointsPath = path.join(__dirname, \"../apps/webapp/src/redux/endpoints\")\n    const importStatements = []\n    const cacheKeys = []\n    let cacheFileContent = `/**\n * This file was automatically generated by tools/generators/generate-cache-file.js file\n */\n\nIMPORT_STATEMENTS\n\n`\n\n    for await (const pathName of walk(endpointsPath, [])) {\n      const isEndpointsFile = fs.lstatSync(pathName).isFile() && pathName.includes(\"-endpoints\")\n      if (isEndpointsFile) {\n        const cacheKey = camelCase(path.basename(pathName, \".ts\").replace(\"-endpoints\", \"\"))\n        cacheKeys.push(cacheKey)\n        const endpointsSelectorRegex = /build => \\(({[\\s\\S]+overrideExisting: false,\\s+})/m\n        const endpointsObjectString = fs.readFileSync(pathName, { encoding: \"utf8\" }).match(endpointsSelectorRegex)[1]\n        const endpointSelectorRegex = /([a-z-A-Z]+): build.[qm]/gm\n        const endpointNames = [...endpointsObjectString.matchAll(endpointSelectorRegex)].map(entries => [entries[1]]).flat()\n\n        if (endpointNames.length > 0) {\n          importStatements.push(`import { ${cacheKey}Api } from \"./${kebabCase(cacheKey)}-endpoints\"`)\n          cacheFileContent += `export const add${capitalize(cacheKey)}CacheKeys = () =>\n  ${cacheKey}Api.enhanceEndpoints({\n    endpoints: {\n${endpointNames\n  .map(endpointName => {\n    const tagPropertyKey = endpointName.includes(\"get\") ? \"providesTags\" : \"invalidatesTags\"\n    return `      ${endpointName}: { ${tagPropertyKey}: [\"${cacheKey}\"] },`\n  })\n  .join(\"\\n\")}\n    },\n  })\\n`\n        }\n      }\n    }\n\n    cacheFileContent = cacheFileContent.replace(\"IMPORT_STATEMENTS\", importStatements.map(importStatement => importStatement).join(\"\\n\"))\n    cacheFileContent += `export const addGeneratedCacheKeys = () => {\n  ${cacheKeys.map(cacheKey => `add${capitalize(cacheKey)}CacheKeys()`).join(\"\\n\")}\n}\\n`\n\n    fs.writeFileSync(`${endpointsPath}/generated-cache-keys.ts`, cacheFileContent, { encoding: \"utf8\" })\n    console.info(`Generated ${endpointsPath}/generated-cache-keys.ts`)\n  }\n}\n","import fs from \"fs\";\nimport path from \"path\";\nimport { walk } from \"../utils\";\nimport { Command } from \"clipanion\";\n\nexport class GenerateEntityIndexFile extends Command {\n  static paths = [[\"generate-entity-index-file\"]]\n\n  static usage = Command.Usage({\n    category: \"generators\",\n    description: \"This script will generate index file for the model library.\",\n    examples: [[\"A basic example\", \"npm run stator-cli generate-entity-index-file\"]],\n  })\n\n  async execute(): Promise<number | void> {\n    const entityIndexLockFilePath = path.join(__dirname, \"entity-index-hash.txt\")\n    const indexFilePath = path.join(__dirname, \"../libs/models/src/index.ts\")\n    const filePathsByFolder = {}\n\n    for await (const entry of walk(path.join(__dirname, \"../libs/models/src/lib\"), [])) {\n      const folder = entry.split(\"lib/\")[1].split(\"/\")[0]\n\n      if (!filePathsByFolder[folder]) {\n        filePathsByFolder[folder] = []\n      }\n      filePathsByFolder[folder].push(entry)\n    }\n\n    let indexFileContent = `/**\n * This file was automatically generated by generate-entity-index.js file\n * You can disable the automatic generation by removing the prepare section of the workspace.json file under api section\n */\\n\\n`\n\n    const sortedFolders = Object.entries(filePathsByFolder)\n      .sort()\n      .reduce((container, [key, value]) => ({ ...container, [key]: value }), {})\n    for (const [folder, filePaths] of Object.entries(sortedFolders)) {\n      indexFileContent += `// ${folder}\\n`\n      indexFileContent += getExportLinesFromFilePaths(filePaths)\n      indexFileContent += \"\\n\"\n    }\n\n    const entityIndexLockFileExists = fs.existsSync(entityIndexLockFilePath)\n    const existingEntityHash = parseInt(\n      entityIndexLockFileExists ? await fs.promises.readFile(entityIndexLockFilePath, { encoding: \"utf8\" }) : \"\"\n    )\n    const currentHash = hashCode(indexFileContent)\n    if (existingEntityHash !== currentHash) {\n      await fs.promises.writeFile(entityIndexLockFilePath, currentHash.toString(), { encoding: \"utf8\" })\n      await fs.promises.writeFile(indexFilePath, indexFileContent, { encoding: \"utf8\" })\n\n      console.info(\"Generated index file for shared entity library\")\n    }\n  }\n}\n\nfunction hashCode(str) {\n  let hash = 0\n  let i\n  let chr\n\n  for (i = 0; i < str.length; i++) {\n    chr = str.charCodeAt(i)\n    hash = (hash << 5) - hash + chr\n    hash |= 0 // Convert to 32bit integer\n  }\n  return hash\n}\n\nfunction getExportLinesFromFilePaths(filePaths) {\n  return filePaths\n    .sort()\n    .map(filePath => {\n      const relevantFilePath = filePath.split(\"src/\")[1].replace(\".ts\", \"\")\n\n      return `export * from \"./${relevantFilePath}\"\\n`\n    })\n    .join(\"\")\n}\n","import fs from \"fs\"\nimport path from \"path\"\n\nimport { Command, Option } from \"clipanion\"\n\nimport { walk } from \"../utils\"\n\nexport class RenameProject extends Command {\n  static paths = [[\"rename-project\"]]\n  organization = Option.String({ required: true })\n  project = Option.String({ required: true })\n\n  static usage = Command.Usage({\n    category: \"getting-started\",\n    description: \"This script will rename all occurrences of stator and chocolat-chaud with your own names.\",\n    examples: [[\"A basic example\", \"npm run stator-cli rename-project --organization chocolat-chaud-io --project stator\"]],\n  })\n\n  async execute(): Promise<number | void> {\n    await this.renameProject()\n  }\n\n  async renameProject() {\n    try {\n      console.log(this.organization, this.project, __dirname)\n      const organizationRegex = /^[a-zA-Z-\\d_]+$/gim\n      if (!organizationRegex.test(this.organization)) {\n        console.error(\"The organization name must respect this regex /^[a-zA-Z-\\\\d_]+$/gmi\")\n        process.exit(1)\n      }\n\n      const projectRegex = /^[a-zA-Z-\\d_]+$/gim\n      if (!projectRegex.test(this.project)) {\n        console.error(\"The project name must respect this regex /^[a-zA-Z-\\\\d_]+$/gmi\")\n        process.exit(1)\n      }\n      const databaseName = this.project.replace(/-/g, \"_\")\n      const databaseFiles = [\"docker-compose.yml\", \"seed-data.js\", \"init.sql\", \"test.ts\", \"orm-config.ts\"]\n\n      const ignoredFolders = [\"node_modules\", \"dist\", \".git\", \".idea\", \".cache\"]\n      for await (const entry of walk(path.join(__dirname, \"../\"), ignoredFolders)) {\n        const entryStat = await fs.promises.lstat(entry)\n        if (entryStat.isFile()) {\n          const fileContent = await fs.promises.readFile(entry, \"utf-8\")\n          if (fileContent) {\n            const isDatabaseFile = databaseFiles.some(databaseFile => entry.includes(databaseFile))\n            const replacedFileContent = fileContent\n              .replace(/chocolat-chaud-io/gim, this.organization)\n              .replace(/stator/gim, isDatabaseFile ? databaseName : this.project)\n            await fs.promises.writeFile(entry, replacedFileContent, \"utf-8\")\n          }\n        }\n      }\n\n      console.info(`This is now YOUR project provided generously by:\n\n███████ ████████  █████  ████████  ██████  ██████ \n██         ██    ██   ██    ██    ██    ██ ██   ██ \n███████    ██    ███████    ██    ██    ██ ██████  \n     ██    ██    ██   ██    ██    ██    ██ ██   ██ \n███████    ██    ██   ██    ██     ██████  ██   ██ \n                                                   \n    `)\n    } catch (error) {\n      console.error(error as Error)\n    }\n  }\n}\n","import fs from \"fs\"\nimport path from \"path\"\n\nexport const walk = async function* (dir: string, ignoredPaths: Array<string>, walkedFolderNames: string[] = []) {\n  for await (const directoryEntry of await fs.promises.opendir(dir)) {\n    const entryPath = path.join(dir, directoryEntry.name)\n    if (directoryEntry.isDirectory() && !ignoredPaths.includes(directoryEntry.name)) {\n      walkedFolderNames.push(entryPath)\n      yield* walk(entryPath, ignoredPaths, walkedFolderNames)\n    } else if (directoryEntry.isFile()) {\n      yield entryPath\n    }\n  }\n}\n","module.exports = require(\"clipanion\");","module.exports = require(\"lodash/camelCase\");","module.exports = require(\"lodash/capitalize\");","module.exports = require(\"lodash/kebabCase\");","module.exports = require(\"tslib\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Builtins, Cli } from \"clipanion\"\n\nimport { EnforceFileFolderNamingConvention } from \"./commands/enforce-file-folder-naming-convention\"\nimport { EnforceValidImportsApi } from \"./commands/enforce-valid-imports-api\"\nimport { GenerateCacheKeyFile } from \"./commands/generate-cache-key-file\"\nimport { GenerateEntityIndexFile } from \"./commands/generate-entity-index-file\"\nimport { RenameProject } from \"./commands/rename-project\"\n\nconst [, , ...args] = process.argv\n\nconst cli = new Cli({\n  binaryLabel: `stator-cli`,\n  binaryName: `npm run stator-cli`,\n  binaryVersion: `1.0.0`,\n})\n\ncli.register(RenameProject)\ncli.register(GenerateCacheKeyFile)\ncli.register(GenerateEntityIndexFile)\ncli.register(EnforceValidImportsApi)\ncli.register(EnforceFileFolderNamingConvention)\ncli.register(Builtins.HelpCommand)\ncli.runExit(args).catch(console.error)\n"],"names":[],"sourceRoot":""}